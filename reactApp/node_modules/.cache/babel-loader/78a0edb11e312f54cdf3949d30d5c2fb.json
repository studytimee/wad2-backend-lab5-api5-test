{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abid001\\\\backend\\\\wad2-backend-lab4-api4-React\\\\reactApp\\\\src\\\\privateRoute.js\";\nimport React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { AuthContext } from './authContext';\n\nconst PrivateRoute = props => {\n  const context = useContext(AuthContext); // Destructure props from <privateRoute> \n\n  const {\n    component: Component,\n    ...rest\n  } = props;\n  console.log(`inside privateRoute function check is authenticated? ${context.isAuthenticated}`);\n  return context.isAuthenticated === true ? /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    render: props => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 39\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  })) : /*#__PURE__*/React.createElement(Redirect, {\n    to: {\n      pathname: \"/login\",\n      state: {\n        from: props.location\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default PrivateRoute;","map":{"version":3,"sources":["C:/Users/abid001/backend/wad2-backend-lab4-api4-React/reactApp/src/privateRoute.js"],"names":["React","useContext","Route","Redirect","AuthContext","PrivateRoute","props","context","component","Component","rest","console","log","isAuthenticated","pathname","state","from","location"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAAQC,WAAR,QAA0B,eAA1B;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5B,QAAMC,OAAO,GAAGN,UAAU,CAACG,WAAD,CAA1B,CAD4B,CAE5B;;AACA,QAAM;AAAEI,IAAAA,SAAS,EAAEC,SAAb;AAAwB,OAAGC;AAA3B,MAAoCJ,KAA1C;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAa,wDAAuDL,OAAO,CAACM,eAAgB,EAA5F;AACA,SAAON,OAAO,CAACM,eAAR,KAA4B,IAA5B,gBACL,oBAAC,KAAD,oBAAWH,IAAX;AAAiB,IAAA,MAAM,EAAEJ,KAAK,iBAAI,oBAAC,SAAD,oBAAeA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADK,gBAGL,oBAAC,QAAD;AACE,IAAA,EAAE,EAAE;AACFQ,MAAAA,QAAQ,EAAE,QADR;AAEFC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAEV,KAAK,CAACW;AAAd;AAFL,KADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF;AAUD,CAfD;;AAiBA,eAAeZ,YAAf","sourcesContent":["import React, { useContext} from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport {AuthContext} from './authContext'\r\n\r\nconst PrivateRoute = props => {\r\n  const context = useContext(AuthContext)\r\n  // Destructure props from <privateRoute> \r\n  const { component: Component, ...rest } = props;\r\n  console.log(`inside privateRoute function check is authenticated? ${context.isAuthenticated}`);\r\n  return context.isAuthenticated === true ? (\r\n    <Route {...rest} render={props => <Component {...props} />} />\r\n  ) : (\r\n    <Redirect\r\n      to={{\r\n        pathname: \"/login\",\r\n        state: { from: props.location }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;"]},"metadata":{},"sourceType":"module"}