{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abid001\\\\backend\\\\wad2-backend-lab4-api4-React\\\\reactApp\\\\src\\\\authContext.js\";\nimport React, { useState, createContext } from \"react\";\nimport { login, signup } from \"./api/movie-api\";\nexport const AuthContext = createContext(null);\n\nconst AuthContextProvider = props => {\n  const existingToken = localStorage.getItem(\"token\");\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [authToken, setAuthToken] = useState(existingToken);\n  const [email, setEmail] = useState(\"\"); //Function to put JWT token in local storage.\n\n  const setToken = data => {\n    localStorage.setItem(\"token\", data);\n    setAuthToken(data);\n  };\n\n  const authenticate = async (email, password) => {\n    const result = await login(email, password);\n\n    if (result.token) {\n      setIsAuthenticated(true);\n      setToken(result.token);\n      setEmail(email);\n    }\n  };\n\n  const register = async (email, password, firstName, lastName) => {\n    const result = await signup(email, password, firstName, lastName);\n    console.log(result.code);\n    return result.code == 201 ? true : false;\n  };\n\n  const signout = () => {\n    setTimeout(() => setIsAuthenticated(false), 100);\n  };\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      authenticate,\n      register,\n      signout,\n      email\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default AuthContextProvider;","map":{"version":3,"sources":["C:/Users/abid001/backend/wad2-backend-lab4-api4-React/reactApp/src/authContext.js"],"names":["React","useState","createContext","login","signup","AuthContext","AuthContextProvider","props","existingToken","localStorage","getItem","isAuthenticated","setIsAuthenticated","authToken","setAuthToken","email","setEmail","setToken","data","setItem","authenticate","password","result","token","register","firstName","lastName","console","log","code","signout","setTimeout","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,QAA+C,OAA/C;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AAEA,OAAO,MAAMC,WAAW,GAAGH,aAAa,CAAC,IAAD,CAAjC;;AAIP,MAAMI,mBAAmB,GAAIC,KAAD,IAAW;AACrC,QAAMC,aAAa,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAtB;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAACO,aAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,EAAD,CAAlC,CAJqC,CAMrC;;AACA,QAAMgB,QAAQ,GAAIC,IAAD,IAAU;AACzBT,IAAAA,YAAY,CAACU,OAAb,CAAqB,OAArB,EAA8BD,IAA9B;AACAJ,IAAAA,YAAY,CAACI,IAAD,CAAZ;AACD,GAHD;;AAKA,QAAME,YAAY,GAAG,OAAOL,KAAP,EAAcM,QAAd,KAA2B;AAC9C,UAAMC,MAAM,GAAG,MAAMnB,KAAK,CAACY,KAAD,EAAQM,QAAR,CAA1B;;AACA,QAAIC,MAAM,CAACC,KAAX,EAAkB;AAChBX,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAK,MAAAA,QAAQ,CAACK,MAAM,CAACC,KAAR,CAAR;AACAP,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD;AACF,GAPD;;AASA,QAAMS,QAAQ,GAAG,OAAOT,KAAP,EAAcM,QAAd,EAAwBI,SAAxB,EAAmCC,QAAnC,KAAgD;AAC/D,UAAMJ,MAAM,GAAG,MAAMlB,MAAM,CAACW,KAAD,EAAQM,QAAR,EAAkBI,SAAlB,EAA4BC,QAA5B,CAA3B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACO,IAAnB;AACA,WAAQP,MAAM,CAACO,IAAP,IAAe,GAAhB,GAAuB,IAAvB,GAA8B,KAArC;AACD,GAJD;;AAMA,QAAMC,OAAO,GAAG,MAAM;AACpBC,IAAAA,UAAU,CAAC,MAAMnB,kBAAkB,CAAC,KAAD,CAAzB,EAAkC,GAAlC,CAAV;AACD,GAFD;;AAIA,sBACE,oBAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLD,MAAAA,eADK;AAELS,MAAAA,YAFK;AAGLI,MAAAA,QAHK;AAILM,MAAAA,OAJK;AAKLf,MAAAA;AALK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGR,KAAK,CAACyB,QATT,CADF;AAaD,CA5CD;;AA8CA,eAAe1B,mBAAf","sourcesContent":["import React, { useState, createContext } from \"react\";\r\nimport { login, signup } from \"./api/movie-api\";\r\n\r\nexport const AuthContext = createContext(null);\r\n\r\n\r\n\r\nconst AuthContextProvider = (props) => {\r\n  const existingToken = localStorage.getItem(\"token\");\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [authToken, setAuthToken] = useState(existingToken);\r\n  const [email, setEmail] = useState(\"\");\r\n  \r\n  //Function to put JWT token in local storage.\r\n  const setToken = (data) => {\r\n    localStorage.setItem(\"token\", data);\r\n    setAuthToken(data);\r\n  }\r\n\r\n  const authenticate = async (email, password) => {\r\n    const result = await login(email, password);\r\n    if (result.token) {\r\n      setIsAuthenticated(true);\r\n      setToken(result.token)\r\n      setEmail(email);\r\n    }\r\n  };\r\n\r\n  const register = async (email, password, firstName, lastName) => {\r\n    const result = await signup(email, password, firstName,lastName);\r\n    console.log(result.code);\r\n    return (result.code == 201) ? true : false;\r\n  };\r\n\r\n  const signout = () => {\r\n    setTimeout(() => setIsAuthenticated(false), 100);\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        isAuthenticated,\r\n        authenticate,\r\n        register,\r\n        signout,\r\n        email\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContextProvider;"]},"metadata":{},"sourceType":"module"}